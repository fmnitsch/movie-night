{"version":3,"sources":["OMDB.js","Components/SearchBar/SearchBar.js","Components/Results/Results.js","Components/Picks/Picks.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","apiKey","OMDB","getMovies","searchTerm","fetch","response","ok","json","jsonResponse","Error","Search","alert","getFilmById","id","SearchBar","props","className","type","placeholder","results","onChange","e","updateSearchTerm","search","target","value","Results","nominateMovie","button","document","getElementById","nominations","some","movie","imdbID","resultsmovieCard","querySelector","classList","add","setTimeout","remove","nominationAnimation","style","opacity","useEffect","buttons","querySelectorAll","resultsHeader","forEach","checkNomination","searchResults","length","visibility","map","src","Poster","alt","Title","Year","onClick","Nominations","unNominateMovie","nominationMovieCard","unNominationAnimation","instructions","display","App","state","setState","term","a","movieToNominate","tempArr","push","UnNominatedMovie","filter","nominatedMovie","key","this","localStorage","setItem","JSON","stringify","previousState","i","parse","getItem","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.86fccd3b.chunk.js","sourcesContent":["const baseUrl = \"https://www.omdbapi.com/?apikey=\";\nconst apiKey = \"1f00160f\";\n\nconst OMDB = {\n  async getMovies(searchTerm) {\n    try {\n      const response = await fetch(\n        `${baseUrl}${apiKey}&s=${searchTerm}&type=movie`\n      );\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        if (jsonResponse.Error) {\n          return false;\n        } else {\n          return jsonResponse.Search;\n        }\n      }\n    } catch (error) {\n      return alert(error);\n    }\n  },\n\n  async getFilmById(id) {\n    try {\n      const response = await fetch(`${baseUrl}${apiKey}&i=${id}`);\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        if (jsonResponse.Error) {\n          return false;\n        } else {\n          return jsonResponse;\n        }\n      }\n    } catch (error) {\n      return alert(error);\n    }\n  },\n};\n\nexport default OMDB;\n","import \"./SearchBar.css\";\n\nfunction SearchBar(props) {\n  const updateSearchTerm = (e) => {\n    props.updateSearchTerm(e);\n    props.search(e.target.value);\n  };\n\n  return (\n    <div className=\"search-bar\">\n      <p className=\"input-instructions\">Start typing a movie title</p>\n      <input\n        className=\"input\"\n        type=\"search\"\n        placeholder=\"Search\"\n        results=\"0\"\n        onChange={updateSearchTerm}\n      ></input>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import { useEffect } from \"react\";\nimport \"./Results.css\";\n\nfunction Results(props) {\n  const checkNomination = (button) => {\n    if (props.nominations.some((movie) => movie.imdbID === button.id)) {\n      button.style.opacity = \"50%\";\n    } else {\n      button.style.opacity = \"100%\";\n    }\n  };\n\n  const nominationAnimation = (id) => {\n    const resultsmovieCard = document.querySelector(`.${id}`);\n\n    resultsmovieCard.classList.add(\"onClick\");\n    setTimeout(() => {\n      resultsmovieCard.classList.remove(\"onClick\");\n    }, 500);\n  };\n\n  const nominateMovie = (e) => {\n    const button = document.getElementById(e.target.id);\n    if (props.nominations.some((movie) => movie.imdbID === e.target.id)) {\n      return;\n    } else {\n      nominationAnimation(e.target.id);\n      props.nominateMovie(e.target.id);\n      button.style.opacity = \"50%\";\n    }\n  };\n\n  useEffect(() => {\n    const buttons = document.querySelectorAll(\".nominate\");\n    const resultsHeader = document.querySelector(\".results-header\");\n\n    buttons.forEach((button) => checkNomination(button));\n\n    props.searchResults.length > 0\n      ? (resultsHeader.style.visibility = \"visible\")\n      : (resultsHeader.style.visibility = \"hidden\");\n\n    if (props.nominations.length === 5) {\n      buttons.forEach((button) => (button.style.opacity = \"50%\"));\n    }\n  });\n\n  return (\n    <div className=\"results-container\">\n      <h3 className=\"results-header\">Results for \"{props.searchTerm}\"</h3>\n      <div className=\"movie-list-container\">\n        {props.searchResults.map((movie) => {\n          return (\n            <div className={`movie-card ${movie.imdbID}`} key={movie.imdbID}>\n              <div className=\"movie\">\n                <img className=\"movie-poster\" src={movie.Poster} alt=\"\"></img>\n                <div className=\"movie-title-container\">\n                  <p className=\"movie-title\">\n                    {movie.Title} <span className=\"year\">({movie.Year})</span>\n                  </p>\n                </div>\n              </div>\n              <button\n                className=\"nominate\"\n                id={movie.imdbID}\n                onClick={nominateMovie}\n              >\n                Pick\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Results;\n","import { useEffect } from \"react\";\nimport \"./Picks.css\";\n\nfunction Nominations(props) {\n  const unNominationAnimation = (id) => {\n    const nominationMovieCard = document.getElementById(`nominated ${id}`);\n\n    nominationMovieCard.classList.add(\"onClick\");\n    setTimeout(() => {\n      nominationMovieCard.classList.remove(\"onClick\");\n    }, 300);\n  };\n\n  const unNominateMovie = (e) => {\n    unNominationAnimation(e.target.id);\n    setTimeout(() => {\n      props.unNominateMovie(e.target.id);\n    }, 90);\n  };\n\n  useEffect(() => {\n    const instructions = document.querySelector(\".nominations-instructions\");\n    props.nominations.length > 0\n      ? (instructions.style.display = \"none\")\n      : (instructions.style.display = \"block\");\n  });\n\n  return (\n    <div className=\"nominations-container\">\n      <h2 className=\"nominations-header\">\n        Your Picks ({props.nominations.length}/5)\n      </h2>\n      <div className=\"movie-list-container\">\n        <p className=\"nominations-instructions\">\n          Your picks will appear here as you select them from the search\n          results.\n        </p>\n\n        {props.nominations.map((movie) => {\n          return (\n            <div\n              className={`movie-card nominated ${movie.imdbID}`}\n              id={`nominated ${movie.imdbID}`}\n              key={movie.imdbID}\n            >\n              <div className=\"movie\">\n                <img className=\"movie-poster\" src={movie.Poster} alt=\"\"></img>\n                <div className=\"movie-title-container\">\n                  <p className=\"movie-title\">\n                    {movie.Title} <span className=\"year\">({movie.Year})</span>\n                  </p>\n                </div>\n              </div>\n              <button\n                className=\"un-nominate\"\n                id={movie.imdbID}\n                onClick={unNominateMovie}\n              >\n                Remove\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Nominations;\n","import React from \"react\";\nimport \"./App.css\";\nimport OMDB from \"./OMDB\";\nimport SearchBar from \"./Components/SearchBar/SearchBar\";\nimport Results from \"./Components/Results/Results\";\nimport Picks from \"./Components/Picks/Picks\";\n\nclass App extends React.Component {\n  state = {\n    searchTerm: \"\",\n    searchResults: [],\n    nominations: [],\n  };\n\n  saveStateToLocalStorage() {\n    for (let key in this.state) {\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  componentDidMount() {\n    let previousState = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      let key = localStorage.key(i);\n      previousState.push(JSON.parse(localStorage.getItem(key)));\n    }\n\n    this.setState({\n      nominations: previousState[1],\n    });\n\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    this.saveStateToLocalStorage();\n  }\n\n  updateSearchTerm = (e) => {\n    this.setState({ searchTerm: e.target.value });\n  };\n\n  search = async (term) => {\n    const results = await OMDB.getMovies(term);\n    if (term.length === 0) {\n      this.setState({ searchResults: [] });\n    } else if (results === false) {\n      return;\n    } else {\n      this.setState({ searchResults: results });\n    }\n  };\n\n  nominateMovie = async (id) => {\n    const movieToNominate = await OMDB.getFilmById(id);\n    let tempArr = this.state.nominations;\n    if (this.state.nominations.length >= 5) {\n      return;\n    } else {\n      tempArr.push(movieToNominate);\n      this.setState({ nominations: tempArr });\n    }\n  };\n\n  unNominateMovie = async (id) => {\n    const UnNominatedMovie = await OMDB.getFilmById(id);\n    let tempArr = this.state.nominations.filter((nominatedMovie) => {\n      return nominatedMovie.imdbID !== UnNominatedMovie.imdbID;\n    });\n    this.setState({ nominations: tempArr });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"welcome-section\">\n          <h1>Movie Night!</h1>\n          <p>\n            Pick out the top 5 movies on your must-watch list and never lose\n            track of them!\n          </p>\n          <SearchBar\n            search={this.search}\n            searchTerm={this.state.searchTerm}\n            updateSearchTerm={this.updateSearchTerm}\n          />\n          <Results\n            searchTerm={this.state.searchTerm}\n            searchResults={this.state.searchResults}\n            nominateMovie={this.nominateMovie}\n            nominations={this.state.nominations}\n          />\n        </div>\n        <Picks\n          nominations={this.state.nominations}\n          unNominateMovie={this.unNominateMovie}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}